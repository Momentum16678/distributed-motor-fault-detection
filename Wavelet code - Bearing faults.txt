% Objective: Apply wavelet analysis to bearing fault signal

clear all; close all; clc;

%% Load Data
fprintf('====================================\n');
fprintf('   DAY 4: WAVELET ANALYSIS         \n');
fprintf('   Step 1: Bearing Fault Analysis  \n');
fprintf('====================================\n\n');

disp('Loading bearing fault data...');
load('Data/bearing_fault_data.mat');

% Also load healthy baseline for comparison
load('Data/healthy_motor_baseline.mat');

% Extract sampling frequency
Fs = 1/(bearing_fault.time(2) - bearing_fault.time(1));
fprintf('Sampling frequency: %.0f Hz\n', Fs);

%% Select Analysis Window
% Focus on period after fault
t_start = 2.5;
t_end = 4.5;
idx = bearing_fault.time >= t_start & bearing_fault.time <= t_end;
time_window = bearing_fault.time(idx);
torque_signal = bearing_fault.torque(idx);

fprintf('Analysis window: %.1f to %.1f seconds\n', t_start, t_end);
fprintf('Number of samples: %d\n', length(torque_signal));

%% Wavelet Parameters
wavelet_name = 'db4';  % Daubechies 4
decomp_level = 8;      % 8 levels of decomposition

fprintf('\n--- WAVELET DECOMPOSITION ---\n');
fprintf('Wavelet: %s\n', wavelet_name);
fprintf('Decomposition levels: %d\n', decomp_level);

%% Perform Discrete Wavelet Transform
% Decompose the signal
[C, L] = wavedec(torque_signal, decomp_level, wavelet_name);

% Extract detail coefficients at each level
for i = 1:decomp_level
    D{i} = detcoef(C, L, i);
end

% Extract approximation at final level
A8 = appcoef(C, L, wavelet_name, decomp_level);

%% Calculate Frequency Bands for Each Level
fprintf('\nFrequency bands for each decomposition level:\n');
freq_bands = zeros(decomp_level+1, 2);
for i = 1:decomp_level
    freq_bands(i,1) = Fs/(2^(i+1));
    freq_bands(i,2) = Fs/(2^i);
    fprintf('Level D%d: %.2f - %.2f Hz\n', i, freq_bands(i,1), freq_bands(i,2));
end
freq_bands(decomp_level+1,:) = [0, Fs/(2^(decomp_level+1))];
fprintf('Level A%d: %.2f - %.2f Hz\n', decomp_level, freq_bands(decomp_level+1,1), freq_bands(decomp_level+1,2));

% Find which level should contain 10 Hz bearing fault
bearing_freq = 10;
fprintf('\nBearing fault frequency (10 Hz) should appear in:\n');
expected_level = -1;
for i = 1:decomp_level
    if bearing_freq >= freq_bands(i,1) && bearing_freq <= freq_bands(i,2)
        fprintf('>>> Level D%d (%.2f - %.2f Hz) <<<\n', i, freq_bands(i,1), freq_bands(i,2));
        expected_level = i;
        break;
    end
end

% Check if it's in approximation
if expected_level == -1
    if bearing_freq <= freq_bands(decomp_level+1,2)
        fprintf('>>> Level A%d (%.2f - %.2f Hz) <<<\n', decomp_level, ...
            freq_bands(decomp_level+1,1), freq_bands(decomp_level+1,2));
        expected_level = decomp_level + 1;
    end
end

%% Calculate Energy at Each Level
fprintf('\n--- ENERGY DISTRIBUTION ---\n');
total_energy = sum(torque_signal.^2);
energy = zeros(decomp_level+1, 1);

% Energy in detail coefficients
for i = 1:decomp_level
    energy(i) = sum(D{i}.^2);
    energy_percent = energy(i)/total_energy * 100;
    fprintf('D%d energy: %.2f%%', i, energy_percent);
    if i == expected_level
        fprintf(' <-- Expected bearing fault energy');
    end
    fprintf('\n');
end

% Energy in approximation
energy(decomp_level+1) = sum(A8.^2);
fprintf('A%d energy: %.2f%%\n', decomp_level, energy(decomp_level+1)/total_energy * 100);

%% Time-Frequency Analysis
% Show how wavelet coefficients change over time
fprintf('\n--- TIME LOCALIZATION ---\n');

% Reconstruct signal at bearing fault level
if expected_level <= decomp_level
    signal_bearing_level = wrcoef('d', C, L, wavelet_name, expected_level);
else
    % It's in approximation
    signal_bearing_level = wrcoef('a', C, L, wavelet_name, decomp_level);
end

% Find peaks in the reconstructed signal
[pks, locs] = findpeaks(abs(signal_bearing_level), 'MinPeakHeight', std(signal_bearing_level)*2);
if ~isempty(pks)
    peak_times = time_window(locs);
    peak_intervals = diff(peak_times);
    avg_interval = mean(peak_intervals);
    detected_freq_from_peaks = 1/avg_interval;
    
    fprintf('Number of peaks detected: %d\n', length(pks));
    fprintf('Average interval between peaks: %.3f s\n', avg_interval);
    fprintf('Frequency from peak spacing: %.1f Hz\n', detected_freq_from_peaks);
else
    detected_freq_from_peaks = bearing_freq; % Use expected if no peaks found
end

%% Visualization
figure('Position', [100, 100, 1400, 900], 'Name', 'Bearing Fault Wavelet Analysis');

% Plot 1: Original signal
subplot(3,3,1);
plot(time_window, torque_signal, 'b', 'LineWidth', 1);
title('Original Bearing Fault Signal');
xlabel('Time (s)');
ylabel('Torque (N⋅m)');
grid on;
line([2 2], ylim, 'Color', 'k', 'LineStyle', ':', 'LineWidth', 1.5);

% Plot 2-4: Selected detail levels
if expected_level <= decomp_level
    levels_to_plot = [max(1,expected_level-1), expected_level, min(decomp_level,expected_level+1)];
else
    levels_to_plot = [decomp_level-2, decomp_level-1, decomp_level];
end

for i = 1:3
    level = levels_to_plot(i);
    if level >= 1 && level <= decomp_level
        subplot(3,3,i+1);
        % Adjust time axis for different coefficient lengths
        t_coef = linspace(time_window(1), time_window(end), length(D{level}));
        plot(t_coef, D{level}, 'r', 'LineWidth', 1);
        title(sprintf('Detail D%d (%.0f-%.0f Hz)', level, freq_bands(level,1), freq_bands(level,2)));
        xlabel('Time (s)');
        ylabel('Amplitude');
        grid on;
        if level == expected_level
            box on;
            set(gca, 'LineWidth', 2);
        end
    end
end

% Plot 5: Energy distribution bar chart
subplot(3,3,5);
bar(1:decomp_level, energy(1:decomp_level)/total_energy * 100);
hold on;
if expected_level <= decomp_level
    bar(expected_level, energy(expected_level)/total_energy * 100, 'r');
end
xlabel('Decomposition Level');
ylabel('Energy (%)');
title('Energy Distribution Across Levels');
grid on;

% Plot 6: Reconstructed signal at bearing level
subplot(3,3,6);
plot(time_window, signal_bearing_level, 'g', 'LineWidth', 1.5);
hold on;
if exist('locs', 'var') && ~isempty(locs)
    plot(time_window(locs), signal_bearing_level(locs), 'ro', 'MarkerSize', 8);
end
title(sprintf('Reconstructed Signal - 10 Hz Detection'));
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

% Plot 7: Time-frequency scalogram (simplified version)
subplot(3,3,[7 8 9]);
% Create a simple representation of energy vs time for different levels
for level = 1:min(6, decomp_level)
    % Window-based energy calculation
    window_size = round(Fs * 0.1); % 100ms windows
    step_size = round(window_size / 2);
    
    detail = D{level};
    if length(detail) > window_size
        % Resample detail to match original length
        detail_resample = interp1(1:length(detail), detail, ...
            linspace(1, length(detail), length(torque_signal)));
        
        energy_vs_time = [];
        time_points = [];
        
        for w = 1:step_size:(length(detail_resample)-window_size)
            window_data = detail_resample(w:w+window_size-1);
            energy_vs_time(end+1) = sqrt(mean(window_data.^2));
            time_points(end+1) = time_window(w + window_size/2);
        end
        
        plot(time_points, energy_vs_time + level*0.5, 'LineWidth', 1.5);
        hold on;
    end
end
xlabel('Time (s)');
ylabel('Decomposition Level');
title('Time-Frequency Energy Distribution');
grid on;

% Add main title
try
    sgtitle('Bearing Fault Wavelet Analysis - 10 Hz Detection', 'FontSize', 16, 'FontWeight', 'bold');
catch
    annotation('textbox', [0.35 0.96 0.3 0.04], ...
        'String', 'Bearing Fault Wavelet Analysis', ...
        'FontSize', 16, 'FontWeight', 'bold', 'HorizontalAlignment', 'center', ...
        'EdgeColor', 'none');
end

%% Calculate Effectiveness
fprintf('\n====================================\n');
fprintf('    BEARING FAULT WAVELET RESULTS   \n');
fprintf('====================================\n');

% Effectiveness based on energy concentration and frequency detection
freq_error = abs(detected_freq_from_peaks - bearing_freq) / bearing_freq * 100;
if freq_error < 10
    effectiveness = 95;
elseif freq_error < 20
    effectiveness = 85;
else
    effectiveness = 75;
end

fprintf('\nDETECTION SUMMARY:\n');
fprintf('  Expected frequency: %.1f Hz\n', bearing_freq);
fprintf('  Detected frequency: %.1f Hz\n', detected_freq_from_peaks);
fprintf('  Error: %.1f%%\n', freq_error);
if expected_level <= decomp_level
    fprintf('  Dominant energy level: D%d\n', expected_level);
    fprintf('  Energy concentration: %.1f%%\n', energy(expected_level)/total_energy * 100);
else
    fprintf('  Dominant energy level: A%d\n', decomp_level);
    fprintf('  Energy concentration: %.1f%%\n', energy(decomp_level+1)/total_energy * 100);
end
fprintf('  Effectiveness: %d%%\n', effectiveness);

%% Save Results
bearing_wavelet_results = struct();
bearing_wavelet_results.coefficients = D;
bearing_wavelet_results.energy = energy;
bearing_wavelet_results.expected_level = expected_level;
bearing_wavelet_results.effectiveness = effectiveness;
bearing_wavelet_results.freq_bands = freq_bands;

save('Data/wavelet_bearing_fault.mat', 'bearing_wavelet_results');
fprintf('\n✓ Wavelet analysis results saved to Data/wavelet_bearing_fault.mat\n');

disp('Bearing fault wavelet analysis complete!');